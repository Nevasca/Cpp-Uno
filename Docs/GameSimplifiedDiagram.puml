@startuml
'https://plantuml.com/class-diagram

'Remove turning ~ into an icon so we can better declare destructors
skinparam classAttributeIconSize 0

package Core
{
    class ConsoleColor
    class ConsoleUtils
    class StateMachine
    interface IState 
    {
        void Enter()
        void Exit()
        void Update()
    }
    
    StateMachine ..> IState
    IState --> StateMachine
}

package Uno
{
    class UnoGame
    {
        StateMachine StateMachine
        bool IsFinished() const
        bool Update()
    }
    
    package MaiMenu
    {
        class MainMenuController
        class MainMenuState
        class LobbyState
        class LobbyController
        
        MainMenuState ---> LobbyState
        LobbyState --> LobbyController
    }
    
    package Game
    {
        class MatchState    
        class MatchFinishedState    
    
        interface IMatchHandler
        
        class MatchController
            
        package Match
        {
            class Board
        }
        
        interface ITurnActionHandler
        
        interface ITurnHandler
        
        interface ITurnEventListener
        
        abstract class TurnAction
        
        interface IHasCards
       
        abstract class Card 
        
        enum EColor 
        
        enum ETurnResult
        {
            Ended
            Running
        }
        
        abstract class Player 
        
        package Cards 
        {                
            
            class DeckController
            
            class CardFactory
            
            class NumberCard
             
            class BuyCard
            class BuyTurnAction 
            
            class ReverseCard
            class ReverseTurnAction
            
            class JumpCard
            class JumpTurnAction
            
            class WildBuyCard
            class ChooseColorTurnAction
        }
        
        package Turn 
        {
            class TurnController 
            
            enum ETurnFlow
            {
                Clockwise
                AntiClockwise
            }    
        }
        
        package Players
        {                
            class ConsolePlayerInput
            
            class HumanPlayer
            
            package AI
            {
                class PlayerBot
            }
        }
        
        package UI
        {
            class UIController
            class CardConsolePresenter
            class TurnConsolePresenter
        }
        
        package Outcome
        {
            class MatchOutcomeController
            
            MatchFinishedState --> MatchOutcomeController
            MatchFinishedState ---> MainMenuState
            MatchFinishedState ---> LobbyState
        }        
        
        UIController --|> ITurnEventListener
        UIController ...> Card             
        UIController ...> Player             
        IMatchHandler <... UIController              
        UIController ...> ITurnHandler                     
        UIController --> CardConsolePresenter
        UIController --> TurnConsolePresenter        
        
        MatchController ...> Card
        MatchController ...> Player
        MatchController ---> DeckController
        MatchController ---> TurnController
        MatchController -> Board
        MatchController ---> UIController
        MatchController --|> IMatchHandler
        
        IMatchHandler ..> Player         
        Player ..> IMatchHandler 
        TurnController ...> IMatchHandler 
        
        TurnController ---|> ITurnActionHandler 
        TurnController ...> ITurnEventListener
        ITurnHandler <|-- TurnController
        TurnController -> ETurnFlow
        TurnController ---> ETurnResult
        TurnController ...> TurnAction
        TurnController ...> Player 
        
        Card -> EColor
        Card <|--- NumberCard
        Card <|--- BuyCard
        Card <|--- ReverseCard
        Card <|--- JumpCard
        Card <|--- WildBuyCard
        
        ReverseCard --> ReverseTurnAction
        JumpCard --> JumpTurnAction                
        BuyCard --> BuyTurnAction                    
        WildBuyCard --> BuyTurnAction
        WildBuyCard --> ChooseColorTurnAction
        
        JumpTurnAction ---|> TurnAction
        ReverseTurnAction ---|> TurnAction  
        ChooseColorTurnAction ---|> TurnAction
        BuyTurnAction ---|> TurnAction
        
        JumpCard ....o ITurnActionHandler
        ReverseCard ....o ITurnActionHandler
        BuyCard ....o ITurnActionHandler
        WildBuyCard ....o ITurnActionHandler 
        ITurnActionHandler ...> TurnAction                              
               
        Player ...> Card
        CardFactory ---> NumberCard 
        CardFactory ---> BuyCard 
        CardFactory ---> ReverseCard 
        CardFactory ---> JumpCard 
        CardFactory ---> WildBuyCard 
        
        IHasCards <.. DeckController
        IHasCards <|-- Board
        DeckController --> CardFactory
        
        Player <|-- HumanPlayer    
        Player <|-- PlayerBot
        HumanPlayer o- ConsolePlayerInput
        
        TurnAction -> ETurnResult
        TurnAction ..> ITurnHandler   
        
        MatchState ---> MatchController
        MatchState ---> MatchFinishedState     
        LobbyState ---> MatchState
    }  
             
    MainMenuState --> MainMenuController
    
    UnoGame ---> MainMenuState
    UnoGame ---> MatchState
}



@enduml