@startuml
'https://plantuml.com/class-diagram

'Remove turning ~ into an icon so we can better declare destructors
skinparam classAttributeIconSize 0

package Uno
{
    class UnoGame
    {
        GameState CurrentState
        bool IsFinished() const
        bool Update()
    }
    
    abstract class GameState
    {
        void Enter()
        void Exit()
        void Update()
    }
    
    package MaiMenu
    {
        class MainMenuController
        class MainMenuState
    }
    
    package Game
    {
        class MatchState        
    
        interface IMatchHandler
        {
            bool CanUseCard(const Card& Card)
            void UseCard(const Player& Player, shared_ptr<Card> Card)
            void BuyCardsFor(Player& Player, int Amount)
            void ChangeCurrentColor(Player& Player, EColor Color)
            bool CanYellUno(const Player& Player)
            void YellUno(const Player& Player)
            const Card& PeekCurrentCard()
        }
        
        class MatchController
        {    
            vector<shared_ptr<Player>> Players;
            void Initialize()        
            void Update()
            bool CanUseCard(const Card& Card)
            void UseCard(const Player& Player, shared_ptr<Card> Card)
            void BuyCardsFor(Player& Player, int Amount)
            void ChangeCurrentColor(Player& Player, EColor Color)
            bool CanYellUno(const Player& Player)
            void YellUno(const Player& Player)
            const Card& PeekCurrentCard()
            bool HasWon(shared_ptr<Player> Player)                
        }    
            
        package Match
        {
            class Board
            {
                shared_ptr<Card> TossedCards
                
                void Stack()
                shared_ptr<Card> BuyCards(int Amount)
                shared_ptr<Card> BuyAllCards()
                const Card& PeekCurrentCard()
                void ChangeCurrentCardColor(EColor Color)        
            }    
        }
        
        interface ITurnActionHandler
        {
            void AddPreTurnAction(TurnAction&& TurnAction)
            void AddPostTurnAction(TurnAction&& TurnAction)                        
        }             
        
        interface ITurnHandler
        {
            void ReverseFlow()
            void JumpTurn()
            int GetCurrentTurnNumber()
        }   
        
        abstract class TurnAction
        {
            ETurnResult Execute(IMatchHandler& Match, ITurnHandler& TurnHandler, Player& Player)
            bool CanAccumulate(const TurnAction& Action) const
            void Accumulate(TurnAction&& Action)            
        }
        
        interface IDeckHandler
        {
            shared_ptr<Card> BuyCards(int Amount)
            shared_ptr<Card> BuyAllCards()
        }
       
        abstract class Card 
        {
            EColor Color
            int Id
            ~ virtual Card()
            virtual bool CanStackOn(const Card& OtherCard) const;
            virtual void Use();
            string GetAbbreviation() const;
        }
        
        enum EColor 
        {
            Blue
            Yellow
            Red
            Green
            Wild
        }        
        
        enum ETurnResult
        {
            Ended
            Running
        }
        
        abstract class Player 
        {
            string Name
            vector<weak_ptr<Card>> Cards
            bool bHasYelledUno
            
            int GetTotalCards()
            bool HasCardToStackOn(const Card& Other)            
            virtual void PlayTurn(IMatchHandler& Match)
            void ChooseColor(IMatchHandler& Match)            
        }
        
        package Cards 
        {                
            class NumberCard 
            {
                short Number
                
                virtual bool CanStackOn(const Card& OtherCard) const override
            }
            
            class DeckController
            {       
                shared_ptr<Card> Cards
                IDeckHandler& SpareDeck
                
                void Initialize(IDeckHandler& InSpareDeck, ITurnActionHandler& TurnActionHandler)
                shared_ptr<Card> BuyCards(int Amount)
                shared_ptr<Card> BuyAllCards()
                void Shuffle()            
            }
            
            class CardFactory
            {
                vector<shared_ptr<Card>> CreateNumberCard()
                vector<shared_ptr<Card>> CreateReverseCard(const ITurnActionHandler& TurnActionHandler)            
                vector<shared_ptr<Card>> CreateJumpCard(const ITurnActionHandler& TurnActionHandler)            
                vector<shared_ptr<Card>> CreateBuyTwoCard(const ITurnActionHandler& TurnActionHandler)
                vector<shared_ptr<Card>> CreateBuyFourCard(const ITurnActionHandler& TurnActionHandler)                        
            }
            
            class BuyCard
            {
                int Amount            
                const ITurnActionHandler& TurnActionHandler
                virtual bool CanStackOn(const Card& OtherCard) override const;
                virtual void Use() override;
            }
            
            class BuyTurnAction 
            {
                bool bCanCounter
            }            
            
            class ReverseCard
            {
                const ITurnActionHandler& TurnActionHandler
                virtual bool CanStackOn(const Card& OtherCard) override const;
                virtual void Use() override;
            }
            
            class ReverseTurnAction
            
            class JumpCard
            {
                const ITurnActionHandler& TurnActionHandler
                virtual bool CanStackOn(const Card& OtherCard) override const;
                virtual void Use() override;
            }
            
            class JumpTurnAction
            
            class WildBuyCard
            {
                int Amount            
                const ITurnActionHandler& TurnActionHandler
                virtual bool CanStackOn(const Card& OtherCard) override const;
                virtual void Use() override;
            }
            
            class ChooseColorTurnAction
        }
        
        package Turn 
        {
            class TurnController 
            {
                ETurnFlow CurrentFlow
                vector<Player> Players
                unique_ptr<TurnAction> PreTurnAction
                unique_ptr<TurnAction> PostTurnAction
                
                void StartNextTurn(IMatchHandler& Match)
                void AddPreTurnAction(TurnAction&& TurnAction)
                void AddPostTurnAction(TurnAction&& TurnAction)
                shared_ptr<Player> PeekCurrentPlayer()
            }
            
            enum ETurnFlow
            {
                Clockwise
                AntiClockwise
            }    
        }
        
        package Players
        {                
            class ConsolePlayerInput
            {
                int CardIndex
                bool bHasYelledUno
                EColor ChosenColor
                
                void ProcessInput()                                
            }
            
            class HumanPlayer
            {
                virtual void PlayTurn(IMatchHandler& Match) override
            }                
            
            package AI
            {
                class PlayerBot
                {
                    virtual void PlayTurn(IMatchHandler& Match) override
                }
            }
        }
        
        package UI
        {
            class UIController
            {
                void ShowCardUsed(const Card& Card, const Player& Player)
                void ShowCardsBought(const vector<shared_ptr<Card>> Cards, const Player& Player)
                void ShowCurrentColorChanged(const Player& Player, EColor Color)
                void ShowCurrentTurn(const ITurnHandler& TurnHandler)
                void ShowPlayerHand(const IMatchContext& Match, const Player& Player)                
                void ShowUnoYelled(const Player& Player)
                void ShowWinner(const Player& Player)
            }
        
            class CardConsolePresenter
            {
                Show(const Card& Card)
                Show(vector<shared_ptr<Card>> Cards)
            }
            
                      
        }
        
        UIController ...> Card             
                UIController ...> Player             
                IMatchHandler <... UIController              
                UIController ...> ITurnHandler                     
                UIController --> CardConsolePresenter        
                
                MatchController ...> Card
                MatchController ...> Player
                MatchController ---> DeckController
                MatchController ---> TurnController
                MatchController ----> Board
                MatchController ---> UIController
                MatchController --|> IMatchHandler 
                
                Player ...> IMatchHandler 
                TurnController ...> IMatchHandler 
                
                TurnController ---|> ITurnActionHandler 
                ITurnHandler <|-- TurnController
                TurnController -> ETurnFlow
                TurnController ---> ETurnResult
                TurnController ...> TurnAction
                TurnController ...> Player 
                
                Card -> EColor
                Card <|---- NumberCard
                Card <|-- BuyCard
                Card <|--- ReverseCard
                Card <|--- JumpCard
                Card <|--- WildBuyCard
                
                ReverseCard --> ReverseTurnAction
                JumpCard --> JumpTurnAction                
                BuyCard --> BuyTurnAction                    
                WildBuyCard --> BuyTurnAction
                WildBuyCard --> ChooseColorTurnAction
                
                JumpTurnAction ---|> TurnAction
                ReverseTurnAction ---|> TurnAction  
                ChooseColorTurnAction ---|> TurnAction
                BuyTurnAction ---|> TurnAction
                
                JumpCard ...> ITurnActionHandler
                ReverseCard ....> ITurnActionHandler
                BuyCard ....> ITurnActionHandler
                WildBuyCard ....> ITurnActionHandler 
                ITurnActionHandler ...> TurnAction                              
                       
                Player ...> Card
                CardFactory ---> NumberCard 
                CardFactory ---> BuyCard 
                CardFactory ---> ReverseCard 
                CardFactory ---> JumpCard 
                CardFactory ---> WildBuyCard 
                
                IDeckHandler <|--- DeckController
                IDeckHandler <|--- Board
                DeckController --> CardFactory
                DeckController ...> ITurnActionHandler    
                
                Player <|-- HumanPlayer    
                Player <|-- PlayerBot
                HumanPlayer o- ConsolePlayerInput
                
                TurnAction -> ETurnResult
                TurnAction ..> ITurnHandler   
                
                GameState <|--- MatchState
                MatchState ---> MatchController     
            }  
                     
            MainMenuState --> MainMenuController
            GameState <|--- MainMenuState
            
            UnoGame ---> MainMenuState
            UnoGame ---> MatchState
}

@enduml